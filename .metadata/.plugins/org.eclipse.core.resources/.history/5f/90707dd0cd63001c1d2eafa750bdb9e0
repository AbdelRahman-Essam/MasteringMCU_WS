/*
 * main.c
 *
 *  Created on: Dec 22, 2021
 *      Author: el msria
 */

#include "stm32f4xx_hal.h"
#include "main.h"

#include "string.h"

void SystemClockConfig(void);
void UART2_Init(void); //High level parameters initializations
void Error_handler(void);

UART_HandleTypeDef huart2;

char *data = "Al-ahly go brrrrrrrrrrr\r\n";

int main(void)
{
	HAL_Init();
	SystemClockConfig();

	UART2_Init();
	uint16_t data_length = strlen(data);
	if (HAL_UART_Transmit(&huart2, (uint8_t*)data, data_length, HAL_MAX_DELAY) != HAL_OK)
	{
		Error_handler();
	}

	while(1)
	{

	}
	return 0;
}

void SystemClockConfig(void)
{
	// We can keep it empty as we will use internal RC oscillator in this application
}

void UART2_Init(void)
{
	/*
	 * Instance : link the handler with the required peripheral by assign it to peripheral base address
	 * Init : Initialize all the configurations of the protocol
	 */
	huart2.Instance = USART2;
	huart2.Init.BaudRate = 115200;
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
	huart2.Init.StopBits = UART_STOPBITS_1;
	huart2.Init.Parity = UART_PARITY_NONE;
	huart2.Init.Mode = UART_MODE_TX_RX;
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart2.Init.OverSampling = UART_OVERSAMPLING_8;

	if (HAL_UART_Init(&huart2) != HAL_OK)
	{
		//There is a problem
		Error_handler();
	}
}

void Error_handler(void)
{
	//Trap in the error handler where there is a problem
	while(1);
}
